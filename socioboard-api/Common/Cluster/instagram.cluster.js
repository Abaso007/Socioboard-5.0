import request from 'request';
import requestPromise from 'request-promise';

function Instagram(instagram) {
  this.instagram = instagram;
  this.profile_add_redirect_url = instagram.redirect_url;
}
/**
 * TODO  Fetch Instagram user details
 * Function to Fetch Instagram user details
 * @param  {number} network -network id
 * @param  {number} team_id -Team id of user
 * @param  {string} code - code generated by the network
 * @return {object} Returns object contains user instagram  details
 */
Instagram.prototype.addInstagramProfile = function addInstagram(
  network,
  teamId,
  code
) {
  return new Promise((resolve, reject) => {
    if (!code) {
      reject("Can't get code from instagram!");
    } else {
      return this.getInstagramAccessToken(code)
        .then(({user_id: uid, acc_token: token}) => {
          return this.getInstagramProfileInformation(uid, token);
        })
        .then(userDetails => {
          userDetails.TeamId = teamId;
          userDetails.Network = network;
          resolve(userDetails);
        })
        .catch(error => {
          reject(error);
        });
    }
  });
};

/**
 * TODO  Fetch Instagram user  Long Lived AccessToken
 * Function to Fetch Instagram user long lived AccessToken
 * @param  {string} code - code generated by the network
 * @return {object} Returns object contains user Long lived Access Token with User unique Id
 */
Instagram.prototype.getInstagramAccessToken = function (code) {
  return new Promise((resolve, reject) => {
    if (!code) {
      reject("Can't get code from instagram!");
    } else {
      return this.getShortLivedAccessToken(code).then(
        ({user_id: uid, access_token: token}) => {
          request.get(
            {
              headers: {'content-type': 'application/x-www-form-urlencoded'},
              url: `https://graph.instagram.com/access_token?client_secret=${this.instagram.client_secret}&access_token=${token}&grant_type=ig_exchange_token`,
            },
            function (error, response, body) {
              if (error) {
                reject(error);
              } else {
                let parsedResponse = JSON.parse(body);
                let userDetails = {
                  user_id: uid,
                  acc_token: parsedResponse.access_token,
                };
                resolve(userDetails);
              }
            }
          );
        }
      );
    }
  });
};

/**
 * TODO  Fetch Instagram user Short Lived AccessToken
 * Function to Fetch Instagram user Short lived AccessToken
 * @param  {string} code - code generated by the network
 * @return {object} Returns object contains user Short  lived Access Token with User unique Id
 */
Instagram.prototype.getShortLivedAccessToken = function (code) {
  return new Promise((resolve, reject) => {
    let requestBody = `code=${code}&redirect_uri=${this.profile_add_redirect_url}&client_id=${this.instagram.client_id}&client_secret=${this.instagram.client_secret}&grant_type=authorization_code`;
    request.post(
      {
        headers: {'content-type': 'application/x-www-form-urlencoded'},
        url: 'https://api.instagram.com/oauth/access_token',
        body: requestBody,
      },
      function (error, response, body) {
        if (error) {
          reject(error);
        } else {
          let parsedResponse = JSON.parse(body);
          resolve(parsedResponse);
        }
      }
    );
  });
};

/**
 * TODO  Fetch Instagram user Profile Information
 * Function to Fetch Instagram Profile details
 * @param  {number} userId - Instagram unique user id
 * @param  {string} accToken - Instagram Long Lived AccessToken
 * @return {object} Returns object contains user instagram  details
 */
Instagram.prototype.getInstagramProfileInformation = function (
  userId,
  accToken
) {
  return new Promise((resolve, reject) => {
    request.get(
      {
        headers: {'content-type': 'application/x-www-form-urlencoded'},
        url: `https://graph.instagram.com/${userId}?access_token=${accToken}&fields=username`,
      },
      (error, response, body) => {
        if (error) {
          reject(error);
        } else {
          let parsedData = JSON.parse(body);
          let userDetails = {
            UserName: parsedData.username,
            FirstName: parsedData.username,
            LastName: '',
            Email: '',
            SocialId: parsedData.id,
            ProfilePicture: '',
            ProfileUrl: `https://www.instagram.com/${parsedData.username}`,
            AccessToken: accToken,
            RefreshToken: accToken,
            FriendCount: '',
            Info: '',
          };
          resolve(userDetails);
        }
      }
    );
  });
};

/**
 * TODO  Fetch Instagram Feeds from specified User
 * Function to Fetch Instagram Feeds from specified User
 * @param  {string} accToken - Instagram Long Lived AccessToken
 * @param  {number} socialId - Instagram unique user id
 * @return {object} Returns object contains user instagram  details
 */
Instagram.prototype.getInstagramFeeds = function (accessToken, socialId) {
  return new Promise((resolve, reject) => {
    if (!accessToken) {
      reject(new Error('Invalid accesstoken!'));
    } else {
      let postDetails = [];
      let url = `https://graph.instagram.com/${socialId}/media?access_token=${accessToken}&fields=media_type,media_url,caption,timestamp`;
      return requestPromise
        .get(url)
        .then(async body => {
          let parsedBody = JSON.parse(body);
          const promises = parsedBody.data.map(async post => {
            let mediaUrl = await this.getmediaUrl(
              post.id,
              post.media_type,
              post.media_url,
              accessToken
            );
            let data = {
              postId: post.id,
              socialId: socialId,
              userName: post.username,
              publishedDate: post.timestamp,
              captionId: '',
              captionText: post.caption ?? '',
              isUserLiked: false,
              likeCount: '',
              commentCount: '',
              type: post.media_type,
              link: '',
              locationName: '',
              locationId: '',
              mediaUrl,
            };
            return data;
          });
          postDetails = await Promise.all(promises);
        })
        .then(() => {
          resolve(postDetails);
        })
        .catch(error => {
          reject(error);
        });
    }
  });
};
/**
 * TODO  Fetch Instagram single and multiple media Url from specified User
 * Function to Fetch Instagram single and multiple media Url from specified User
 * @param  {number} feedId - Instagram Feed id
 * @param  {string} type - Instagram media type for the Feed
 * @param  {string} mUrl - Instagram single media Url
 * @param  {string} accToken - Instagram Long Lived AccessToken
 * @return {object} Returns object contains single and multiple media Url from specified Feed
 */
Instagram.prototype.getmediaUrl = async function (
  feedId,
  type,
  mUrl,
  accessToken
) {
  return new Promise((resolve, reject) => {
    let mediaurl = [];
    if (type == `CAROUSEL_ALBUM`) {
      let url = `https://graph.instagram.com/${feedId}/children?fields=media_type,media_url&access_token=${accessToken}`;
      return requestPromise
        .get(url)
        .then(body => {
          let parsedBody = JSON.parse(body);
          parsedBody.data.map(post => {
            mediaurl.push({
              media_type: post.media_type,
              media_url: post.media_url,
            });
          });
          resolve(mediaurl);
        })
        .catch(error => {
          reject(error);
        });
    } else {
      mediaurl.push({
        media_type: type,
        media_url: mUrl,
      });
      resolve(mediaurl);
    }
  });
};
export default Instagram;
